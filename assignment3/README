CS3753 (Operating Systems)
Fall 2014
University of Colorado Boulder
Programming Assignment 3
Public Code

By Alex Tsankov, Sam Volin, Cristobal Salazar - 2014
http://www.andysayler.com

---Folders---
handout - Assignment description and documentation

---Executables---
./testscript - A simple bash script for running a few sample test cases
./pi_fork - A simple program for statistically calculating pi, with the ability to fork.
./rw_fork - A simple i/o bound example program with a number of forks.
/
./rr_quantum - A simple program for determining the RR quantum.

---Examples---
Build:
 make

Clean:
 make clean

pi-fork:
 ./pi_fork <Number of Iterations> <Scheduling Policy> <forks>

rw_fork:
 ./rw_fork <#Bytes to Write to Output File> <Block Size> <Input Filename> <Output Filename> <scheduling policy> <forks> 

testscript:
 ./testscript

rr_quantum:
 sudo ./rr_quantum


 WHAT WE NEED TO GET FOR RAHAT: 

 1. Real time -> Finish - start time
 2. System Time -> Amount of time spent in the kernel 
 3. User time -> Time spent in user space 
 4. Waitime -> Amount of time spent waiting. 
 5. # of context switches 

 to get this info, call GNU time in /usr/bin/time -v NOTE: this is different than $time in shell because we get more info. 

 Example:sudo /usr/bin/time -v ./pi 1000 {SCHED_RR, SCHED_FIFO, SCHED_OTHER}

 Notes: To get wait time = Realtime - (System time + user time)
 		SCHED_OTHER is CFS by default. 


 C code for the scheduler:

 #include <sched.h> 
 //contains all of the metainfo for a program 
 sched_param param; 
 //this actually sets the priority 
 param.priority(sched_getpriority_max(policy));
 //this sets the scheduler on the pid 0 with the parameter for the scheduler pased in. 
 sched_setschduler(0,SCHED_RR,&param);


Speed notes: 

1048576 bytes (1.0 MB) copied, 0.0649386 s, 16.1 MB/s

